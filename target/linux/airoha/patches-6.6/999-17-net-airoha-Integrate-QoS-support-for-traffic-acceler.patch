From c1f0cda49e7bd2005871f887a116a7cddc6ff55a Mon Sep 17 00:00:00 2001
Message-ID: <c1f0cda49e7bd2005871f887a116a7cddc6ff55a.1738452112.git.lorenzo@kernel.org>
In-Reply-To: <bc341c91bf9f6363f16bb2c8c508e133e8aa7d36.1738452112.git.lorenzo@kernel.org>
References: <bc341c91bf9f6363f16bb2c8c508e133e8aa7d36.1738452112.git.lorenzo@kernel.org>
From: Lorenzo Bianconi <lorenzo@kernel.org>
Date: Tue, 28 Jan 2025 10:22:09 +0100
Subject: [PATCH net-next 9/9] net: airoha: Integrate QoS support for traffic
 accelerator

Signed-off-by: Lorenzo Bianconi <lorenzo@kernel.org>
---
 drivers/net/ethernet/airoha/airoha_ppe.c | 19 +++++++++++++++----
 1 file changed, 15 insertions(+), 4 deletions(-)

--- a/drivers/net/ethernet/airoha/airoha_ppe.c
+++ b/drivers/net/ethernet/airoha/airoha_ppe.c
@@ -200,11 +200,11 @@ static int airoha_get_dsa_port(struct ne
 static int airoha_ppe_foe_entry_prepare(struct airoha_foe_entry *hwe,
 					struct net_device *dev, int type,
 					struct airoha_flow_data *data,
-					int l4proto)
+					int l4proto, u32 priority)
 {
 	int dsa_port = airoha_get_dsa_port(&dev);
+	u32 channel = 0, qdata, ports_pad, val;
 	struct airoha_foe_mac_info_common *l2;
-	u32 qdata, ports_pad, val;
 
 	memset(hwe, 0, sizeof(*hwe));
 
@@ -228,8 +228,11 @@ static int airoha_ppe_foe_entry_prepare(
 		if (dsa_port >= 0)
 			pse_port = port->id == 4 ? FE_PSE_PORT_GDM4 : port->id;
 		else
-			pse_port = 2; /* uplink relies on GDM2 loopback */
+			/* uplink relies on GDM2 loopback for GDM3 and GDM4 */
+			pse_port = 2;
 		val |= FIELD_PREP(AIROHA_FOE_IB2_PSE_PORT, pse_port);
+		channel = dsa_port >= 0 ? dsa_port : port->id;
+		channel = channel % AIROHA_NUM_QOS_CHANNELS;
 	}
 
 	if (is_multicast_ether_addr(data->eth.h_dest))
@@ -241,7 +244,10 @@ static int airoha_ppe_foe_entry_prepare(
 	if (type == PPE_PKT_TYPE_IPV6_ROUTE_3T)
 		hwe->ipv6.ports = ports_pad;
 
-	qdata = FIELD_PREP(AIROHA_FOE_SHAPER_ID, 0x7f);
+	qdata = FIELD_PREP(AIROHA_FOE_CHANNEL, channel) |
+		FIELD_PREP(AIROHA_FOE_QID, priority % AIROHA_NUM_QOS_QUEUES) |
+		FIELD_PREP(AIROHA_FOE_SHAPER_ID, 0x7f);
+
 	if (type == PPE_PKT_TYPE_BRIDGE) {
 		hwe->bridge.dest_mac_hi = get_unaligned_be32(data->eth.h_dest);
 		hwe->bridge.dest_mac_lo =
@@ -544,6 +550,7 @@ static int airoha_ppe_flow_offload_repla
 	struct airoha_foe_entry hwe;
 	int err, i, offload_type;
 	u16 addr_type = 0;
+	u32 priority = 0;
 	u8 l4proto = 0;
 
 	if (rhashtable_lookup(&eth->flow_table, &f->cookie,
@@ -621,6 +628,9 @@ static int airoha_ppe_flow_offload_repla
 			break;
 		case FLOW_ACTION_PPPOE_PUSH:
 			break;
+		case FLOW_ACTION_PRIORITY:
+			priority = act->priority;
+			break;
 		default:
 			return -EOPNOTSUPP;
 		}
@@ -631,7 +641,7 @@ static int airoha_ppe_flow_offload_repla
 		return -EINVAL;
 
 	err = airoha_ppe_foe_entry_prepare(&hwe, odev, offload_type,
-					   &data, l4proto);
+					   &data, l4proto, priority);
 	if (err)
 		return err;
 
